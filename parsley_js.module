<?php


define('PARSLEY_JS_RULE_INVALID', -1);
define('PARSLEY_JS_RULE_NOT_FOUND', 1);

/**
 * Implements hook_menu()
 */
function parsley_js_menu() {
  $items = array();

  // Admin page to select which form to attach the JS to
  $items['admin/config/user-interface/parsley-js'] = array(
    'title' => 'ParsleyJS Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('parsley_js_settings_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Setting page that lets you choose which forms to include the JS on
 *
 * @param array $forms
 *  Reference to form array
 *
 * @param array $form_state
 *  Reference to form_state
 */
function parsley_js_settings_form($form, &$form_state) {
  $form['parsley_js_form_ids'] = array(
    '#type' => 'fieldset',
    '#title' => t('Forms IDs'),
  );

  $form['parsley_js_form_ids'][] = array(
    '#type' => 'textfield',
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_hook_info
 *
 * Declaring the parsle_js_form hook to allow developers to hook their forms into parsley_js
 */

function parsley_js_hook_info() {
  $hooks = array();

  $hooks['parsley_js_forms'] = array(
    'group' => 'parsley_js',
  );

  return $hooks;
}

/**
 * Implements hook_form_alter
 *
 * This is where the main work happens
 * First check wether the there is a cache entry with form_ids, if not it will
 * build up a new list from calling the modules implementing the hook
 *
 * @todo Filter which forms to include on using system var
 *
 * @param array $form
 *   The form array ref
 * @param array $form_state
 *   The form_state array ref
 * @param string $form_id
 *   The form_id
 */
function parsley_js_form_alter(&$form, &$form_state, $form_id) {
  //Check if we have a cache for the form_ids
  $declared_forms = cache_get('parsley_js:form_ids');

  if ($declared_forms === FALSE) {
    //Rebuild list of known hooks for parsley_js_form
    $declared_forms = module_invoke_all('parsley_js_forms');

    if (!empty($declared_forms)) {
      cache_set('parsley_js:form_ids', $declared_forms);
    }
  }
  elseif (!empty($declared_forms->data)) {
    if (is_array($declared_forms->data) && in_array($form_id, $declared_forms->data)) {

      //Libraries module gives us a nice attach for this
      $form['#attached']['libraries_load'][] = array('parsleyjs');

      if (empty($form['#attributes'])) {
        $form['#attributes'] = array();
      }

      //Attach the parsleyjs binder
      $form['#attributes']['data-parsley-validate'] = 'data-parsley-validate';

      //Loop through the fields and attach the relevent validator attrib
      foreach ($form as &$element) {
        if (!empty($element['#rules'])) { 
          foreach ($element['#rules'] as $rule) {
            if (is_array($rule)) {

              //Borrowed from FAPI module
              if (!isset($rule['rule'])) {
                drupal_set_message(t('Rule array with wrong structure on %field.', array('%field' => $element['#name'])), 'error');
                continue;
              }
              $parsed_rule = _parsley_js_rule_parse($rule['rule']);
            }
            else {
              $parsed_rule = _parsley_js_rule_parse($rule);
            }

            //Set the element only if we have received an array back.
            if (is_array($parsed_rule)) {
              list($attrib, $val) = $parsed_rule;
              $element['#attributes'][$attrib] = array($val);
            }
            elseif($parsed_rule === PARSLEY_JS_RULE_INVALID) {
              drupal_set_message(t('Invalid rule @rule on field %field', array('@rule' => $rule, '%field' => $element['#name'])), 'error');
              continue;
            }
          }
        }
        if (!empty($element['#required']) && $element['#required'] == TRUE){
          list($attrib, $val) = _parsley_js_rule_parse('required');
          $element['#attributes'][$attrib] = array($val);
        }
      }
    }
  }
}

/**
 * Helper function to choose correct rule parser
 *
 * @param string $rule
 *   The rule with either params or no params, it folows the parsleyjs syntax
 *
 * @see http://parsleyjs.org/documentation.html#basic-constraints
 */
function _parsley_js_rule_parse($rule) {
  // Borrowed from FAPI module
  // Checks wether there are any params included
  preg_match('/^(.*?)(\[(.*)\])?$/', $rule, $rs);
  if (count($rs) == 2) {
    return _parsley_js_parse_no_args($rs);
  }
  elseif (count($rs) == 4) {
    return _parsley_js_parse_args($rs);
  }
  else {
    return PARSLEY_JS_RULE_INVALID;
  }
}

//All the attribs that don't use args
function _parsley_js_parse_no_args($rs) {
  switch ($rs[1]) {
    case 'required':
      return array('parsley-required', 'true');
      break;
    case 'notblank':
      return array('parsley-notblank', 'true');
      break;
    case 'email':
      return array('parsley-type', 'email');
      break;
    case 'url':
      return array('parsley-type', 'url');
      break;
    case 'urlstrict':
      return array('parsley-type', 'urlstrict');
      break;
    case 'digit':
      return array('parsley-type', 'digits');
      break;
    case 'numeric':
      return array('parsley-type', 'number');
      break;
    case 'alpha_numeric':
      return array('parsley-type', 'alphanum');
      break;
    case 'dateIso':
      return array('parsley-type', 'dateIso');
      break;
    case 'phone':
      return array('parsley-type', 'phone');
      break;
    default:
      return PARSLEY_JS_RULE_NOT_FOUND;
      break;
  }
}

//All the attribs that use args
function _parsley_js_parse_args($rs) {
  switch($rs[1]) {
    case 'length':
      return _parsley_js_rule_length($rs[3]);
      break;
    case 'range':
      return _parsley_js_rule_range($rs[3]);
      break;
    default:
      return PARSLEY_JS_RULE_NOT_FOUND;
      break;
  }
}

/**
 * The rule for length
 *
 * @param string $args
 *   The arguments for the length rule
 */
function _parsley_js_rule_length($args) {
  $ranges = _parsley_js_numeric_args_parser($args);
  if (is_numeric($ranges[0]) && is_numeric($ranges[1])) {
    return array('parsley-rangelength', sprintf('[%d, %d]', $ranges[0], $ranges[1]));
  }
  elseif ($ranges[0] == '*' && is_numeric($ranges[1])) {
    return array('parsley-maxlength', $ranges[1]);
  }
  elseif (is_numeric($ranges[0]) && $ranges[1] == '*') {
    return array('parsley-minlength', $ranges[0]);
  }
  else {
    return PARSLEY_JS_RULE_INVALID;
  }
}


/**
 * The rule for numeric range
 *
 * @param string $args
 *   The arguments for the range rule
 */
function _parsley_js_rule_range($args) {
  $ranges = _parsley_js_numeric_args_parser($args);
  if (is_numeric($ranges[0]) && is_numeric($ranges[1])) {
    return array('parsley-range', sprintf('[%d, %d]', $ranges[0], $ranges[1]));
  }
  elseif ($ranges[0] == '*' && is_numeric($ranges[1])) {
    return array('parsley-max', $ranges[1]);
  }
  elseif (is_numeric($ranges[0]) && $ranges[1] == '*') {
    return array('parsley-min', $ranges[0]);
  }
  else{
    return PARSLEY_JS_RULE_INVALID;
  }
}

/**
 * Helper function to parse out arguments with numeric values
 */
function _parsley_js_numeric_args_parser($args) {
  if (strpos($args, ',') > 0) {
    $ranges = explode(',', $args);
    $ranges = array_map('trim', $ranges);
  }
  elseif (is_numeric($args)) {
    $ranges = array($args, $args);
  }
  else {
    drupal_set_message(t('@args is not a valid range arguments', array('@args' => $args)), 'error');
    return FALSE;
  }
  return $ranges;
}


/**
 * Implements hook_libraries_info() from the libraries module
 */
function parsley_js_libraries_info() {
  $libraries = array();
  $libraries['parsleyjs'] = array(
    'name' => 'Parsley JS',
    'vendor url' => 'http://parsleyjs.org/',
    'download url' => 'https://github.com/guillaumepotier/Parsley.js/releases',
    'version arguments' => array(
      'file' => 'CHANGELOG.md',
      //The version in the CHANGELOG.md is usually this pattern **x.x.x**
      'pattern' => '@\*\*([0-9\.]+)@',
      'lines' => 5,
    ),
    'files' => array(
      'js' => array(
        'parsley.js',

      ),
      'variants' => array(
        'minified' => array(
          'files' => array(
            'js' => array(
              'dist/parsley.min.js',
            ),
          ),
        ),
        'source' => array(
          'files' => array(
            'js' => array(
              'parsley.js',
            ),
          ),
        ),
      ),
    )
  );
  return $libraries;
}
